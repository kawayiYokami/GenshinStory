import json
from pathlib import Path
import logging
import sys

# --- Config ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# This script reads the index generated by the markdown script, so paths are the same.
JSON_INPUT_PATH = project_root / "web/docs-site/public/domains/hsr/metadata/index.json"
JSON_OUTPUT_PATH = project_root / "web/docs-site/public/domains/hsr/metadata/catalog.json"
MD_ROOT_PREFIX = "/domains/hsr/docs"

def get_physical_path(item):
    """Dynamically builds the physical path from the catalog item."""
    frontend_path = item.get("path", "")
    # Example frontend_path: /v2/hsr/category/characters/三月七-1001
    # We need to convert it to a physical path like /domains/hsr/docs/characters/三月七-1001.md
    parts = frontend_path.split('/')
    if len(parts) < 5:
        return None
    
    # parts[0]=empty, [1]=v2, [2]=hsr, [3]=category
    relative_path = "/".join(parts[4:])
    return f"{MD_ROOT_PREFIX}/{relative_path}.md"

def create_catalog_tree():
    logging.info(f"Reading main index from {JSON_INPUT_PATH}...")
    if not JSON_INPUT_PATH.exists():
        logging.error(f"Main index file not found at {JSON_INPUT_PATH}. Run the markdown generation script first.")
        sys.exit(1)

    with open(JSON_INPUT_PATH, 'r', encoding='utf-8') as f:
        index_data = json.load(f)

    logging.info(f"Loaded {len(index_data)} index entries. Building catalog tree...")
    
    catalog_tree = {}
    for item in index_data:
        physical_path = get_physical_path(item)
        if not physical_path:
            continue

        path_parts = physical_path.replace(MD_ROOT_PREFIX, "", 1).strip("/").split("/")
        
        current_level = catalog_tree
        for i, part in enumerate(path_parts):
            if i == len(path_parts) - 1:
                current_level[part] = None  # File
            else:
                if part not in current_level:
                    current_level[part] = {}  # Directory
                current_level = current_level[part]

    logging.info(f"Writing catalog tree to {JSON_OUTPUT_PATH}...")
    try:
        JSON_OUTPUT_PATH.parent.mkdir(parents=True, exist_ok=True)
        with open(JSON_OUTPUT_PATH, 'w', encoding='utf-8') as f:
            json.dump(catalog_tree, f, ensure_ascii=False, indent=2)
        logging.info("Catalog tree generation successful!")
    except Exception as e:
        logging.error(f"Error writing catalog tree: {e}")
        sys.exit(1)

if __name__ == "__main__":
    create_catalog_tree()
